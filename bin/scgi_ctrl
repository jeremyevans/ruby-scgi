#!/usr/local/bin/ruby
require 'getoptlong'
require 'yaml'
SCGI_DEFAULT_CONFIG = {:pidfile=>'log/scgi.pid', :number=>1, :port=>9999,
  :processor=>'Rails', :fork=>1, :logfile=>'log/scgi.log', :maxconns=>2**30-1,
  :bind=>'127.0.0.1', :command=>''}
SCGI_CONFIG = {}

def config_file_options(filename)
  begin
    config = YAML.load(File.read(filename))
    config.is_a?(Hash) ? config : Hash.new
  rescue
    Hash.new
  end
end

def get_processor(string)
  raise NameError, "#{string} is not a valid processor!" unless string =~ /\A[A-Z][A-ZA-z]*\z/
  processor = "#{string}SCGIProcessor"
  require processor
  eval(processor)
end

def parse_options
  config = {:config => 'config/scgi.yaml'}
  opts = GetoptLong.new(
    [ '--bind', '-b', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--config', '-c', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--directory', '-d', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--environment', '-e', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--fork', '-f', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--logfile', '-l', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--maxconns', '-m', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--number', '-n', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--port', '-p', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--pidfile', '-P', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--processor', '-r', GetoptLong::REQUIRED_ARGUMENT ]
  )
  opts.each do |opt, arg|
    case opt
      when '--bind'
        config[:bind] = arg
      when '--config'
        config[:config] = arg
      when '--directory'
        Dir.chdir(arg)
      when '--environment'
        config[:environment] = arg
      when '--fork'
        config[:fork] = arg.to_i
      when '--logfile'
        config[:logile] = arg
      when '--maxconns'
        config[:maxconns] = arg.to_i
      when '--number'
        config[:number] = arg.to_i
      when '--port'
        config[:port] = arg.to_i
      when '--pidfile'
        config[:pidfile] = arg
      when '--processor'
        config[:processor] = arg
    end
  end
  
  # Configuration Precedence: Command Line > Config File > Default
  SCGI_CONFIG.merge!(SCGI_DEFAULT_CONFIG)
  SCGI_CONFIG.merge!(config_file_options(config[:config]))
  SCGI_CONFIG.merge!(config)
end

def process(command)
  case command
    when 'start'
      stop
      start
    when 'stop'
      stop
    else
      puts usage
  end
end

def start
  processor = get_processor(SCGI_CONFIG[:processor]).new(SCGI_CONFIG)
  pids = []
  SCGI_CONFIG[:number].times do |i|
    socket = TCPServer.new(SCGI_CONFIG[:bind], port = SCGI_CONFIG[:port]+i)
    SCGI_CONFIG[:fork].times do
      if pid = fork
        pids << pid
      else
        $0 = "scgi-#{SCGI_CONFIG[:processor]} dir:#{Dir.pwd} port:#{port}"
        return processor.listen(socket)
      end
    end
  end
  File.open(SCGI_CONFIG[:pidfile], 'wb'){|file| file.print("#{pids.join(' ')}")}
end

def stop
  if File.file?(SCGI_CONFIG[:pidfile])
    pids = nil
    File.open(SCGI_CONFIG[:pidfile], 'rb'){|f| pids = f.read.split.collect{|x| x.to_i if x.to_i > 0}.compact}
    if pids.length > 0
      Process.kill("INT", *pids) rescue return nil
      File.delete(SCGI_CONFIG[:pidfile])
    end
  end
end

def usage
  <<-END
scgi_ctrl [option=value, ...] (start|stop)
 Options:
  -b, --bind          IP address to bind to [127.0.0.1]
  -c, --config        Location of config file [config/scgi.yaml]
  -d, --directory     Working directory [.]
  -e, --environment   Environment (for Rails) [production]
  -f, --fork          Number of listners on each port [1]
  -l, --logfile       Location of log file [log/scgi.log]
  -m, --maxconns      Maximum number of concurrent users [2**30-1]
  -n, --number        Number of ports to bind to [1]
  -p, --port          Starting port to bind to [9999]
  -P, --pidfile       Location of pid file [log/scgi.pid]
  -r, --processor     Type of processor to use [Rails]
END
end

parse_options
process(ARGV[0])
